# Important note: for all metadata, ¥ will be stripped output.
# I did this as cheap obfuscation method to make scrapping just a little
# bit more difficult.
metadata:
  fullName: 'Tim Doerzbacher'
  phone_number: '¥412¥•¥758¥•¥0179¥'
  email: '¥tim¥@¥t¥im¥-¥doerz¥bacher¥.¥c¥om¥'
  website: https://tim-doerzbacher.com
  headline: 'Software Engineer'
  github: https://github.com/timmd909/
  intro_points:
    - 20+ years Linux power user and administration experience
    - 10+ years experience delivering software solutions

languages:
  title: "Languages"
  entries:
    - { name: "Bash"        , level: 4 }
    - { name: "C/C++"       , level: 3 }
    - { name: "Erlang"      , level: 2 }
    - { name: "HTML/CSS"    , level: 5 }
    - { name: "JavaScript"  , level: 5 }
    - { name: "LESS"        , level: 4 }
    - { name: "PHP"         , level: 5 }
    - { name: "Python"      , level: 2 }
    - { name: "SASS/SCSS"   , level: 4 }
    - { name: "SQL"         , level: 4 }
    - { name: "Yaml"        , level: 5 }

tools:
  title: "Technologies"
  entries:
    - { name: "Ansible"             , level: 4 }
    - { name: "Apache"              , level: 4 }
    - { name: "Bootstrap"           , level: 5 }
    - { name: "CodeIgniter"         , level: 4 }
    - { name: "DataTables"          , level: 5 }
    - { name: "Durandal"            , level: 5 }
    - { name: "FreeCAD"             , level: 4 }
    - { name: "Git"                 , level: 5 }
    - { name: "Jira"                , level: 4 }
    - { name: "jQuery"              , level: 5 }
    - { name: "Knockout"            , level: 5 }
    - { name: "MariaDB"             , level: 5 }
    - { name: "MySQL"               , level: 5 }
    - { name: "Nightwatch.js"       , level: 4 }
    - { name: "NodeJS"              , level: 4 }
    - { name: "PHPUnit"             , level: 4 }
    - { name: "PostgreSQL"          , level: 3 }
    - { name: "QUnit"               , level: 5 }
    - { name: "Raspberry Pi"        , level: 5 }
    - { name: "React"               , level: 3 }
    - { name: "RequireJS"           , level: 5 }
    - { name: "Subversion"          , level: 3 }
    - { name: "Symfony2"            , level: 4 }
    - { name: "Ubuntu"              , level: 5 }
    - { name: "WebDriver"           , level: 4 }
    - { name: "WordPress"           , level: 3 }

skills:
  title: "Skills"
  entries:
    - { name: "Agile Development"        , level: 5 }
    - { name: "LAMP Environments"        , level: 5 }
    - { name: "Linux Administration"     , level: 4 }
    - { name: "Database Design"          , level: 4 }
    - { name: "Graphic Design"           , level: 3 }

operating_systems:
  title: "Operating Systems"
  entries:
    - { name: "GNU/Linux", level: 5 }
    - { name: "Mac OS X" , level: 4 }
    - { name: "Windows"  , level: 1 }

accomplishments:
  title: 'Noteworthy Accomplishments'
  entries:
    - description:
        Creation of continuous integration and deployment pipelines in Gitlab
        to help speed up Opus One Interactive releases
      notes:
        The previous release process was a laborious manual process that
        took most of the working day to complete. Full release automation
        turned that into an hour long process, which was later refined to
        approximately a half hour. A single console command kicks off the
        release and require no further input. All version numbers, branches,
        merge requests, and a Jira release ticket are all
        automatically created.

    - description:
        Overseeing migration and rewriting of legacy CodeIgniter code to a
        more modern Symfony based project
      notes:
        Getting them to play together nicely before completely cutting
        out CodeIgniter was a fun problem. All the controllers and routing
        remained in CI, while large swathes were hollowed out and replaced
        with calls to PSR code. This also drastically increased our code
        coverage which reduced the frequency and severity of bugs
        rather quickly.

    - description:
        Reimplemented legacy Tablesaw based list views using DataTables for
        increased speed and flexibility
      notes:
        Event list views were previously hard coded into the application and
        thus not user configurable. The new architecture allowed user
        configurable. I later added custom in-place editors for most table
        cells to allow users to quickly edit rows without needing to open
        the event editor.

    - description:
        Created new flexible and user customizable view-based rendering
        pipeline for easily filtering and transforming data into
        various formats
      notes:
        The new rendering pipeline now supports output in JSON, CSV, and PDF.
        This allows the same codepath to handle feeding data to the
        DataTables based event list, and the report generators.

    - description:
        Created new user customizable report functionality for events
      notes:
        This relies heavily upon the rendering pipeline I created. The
        previously implemented version was more limited, and user saved
        reports couldn't be edited. They could only be deleted and created
        anew from scratch. The new version would allow editing, rearranging
        columns, and other standard operations on any user saved report.

    - description:
        Completely reimplemented PDF generation to overcome existing
        limitations and to allow customers more flexibility in the layout of
        their documents
      notes:
        The old way of generating PDFs relied upon a years old fork
        of an abandoned software project (TCPDF). Everything originally was
        manually coded to output data at fixed locations, forcing all clients
        to have nearly identical looking documents. Now all clients have near
        unlimited control of page layout. The pages are generated by using
        bespoke Twig templates to create an intermediary HTML document.
        That is then fed to PagedJS to do the final rendering.

    - description:
        Created new release process to automatically generate and distribute
        assets in various package formats (NuGet, WebJAR, etc.)
      notes:
        My team provided a shared UI toolkit internally for multiple teams,
        all using different technologies. Automating the release into formats
        suitable for myriad development environments saved all of us time
        and effort.

    - description:
        Implemented visual regression systems for both Opus One Interactive
        and Intermedix
      notes:
        At Intermedix, the visual regressions were automatically run against
        the toolkit and demos to ensure that no breaking changes would cause
        other teams grief. At Opus One Interactive, the visual regression tests
        are used to prevent breaking changes in client contracts, itineraries,
        and all other PDFs.

    - description:
        Lead the project to divericate a large monolithic toolkit into
        approximately a dozen independent projects.
      notes:
        The original architecture caused frequent regressions and compatibility
        issues with downstream teams. Chopping the toolkit into many smaller
        packages avoided many headaches while allowing my team more flexibility
        to improve.

    - description:
        Created an application to collect employment applications along
        signatures for a trucking company.
      notes:
        This was Flash based and way before it was cool to digitally
        sign documents.

    - description:
        Created a syncing algorithm for a custom instant messaging app
        that respected user privacy
      notes:
        I developed an algorithm for contact information that would normalize
        and hash all contact information in a user's address book. This
        was then used to suggest new friends as people signed up for the app.

    - description:
        Designed and implemented a new product that would allow multiple
        DVRs to Archive and sync video data between nodes.
      notes:
        The system was designed to have a large array of disks in RAID5 to
        sync all the data to a central location. From there, it was indexed
        to allow quickly searching, sharing, and restoring to any DVR.

    - description:
        Created a customer service and inventory management software for
        supporting customers and preventing unauthorized copying
      notes:
        The main goal of this software was to prevent unauthorized copies
        of the ETC system while allowing sales and support to upsell new
        features. All the user had to do then was trigger and update, and
        then any new features would become available.

    - description:
        Design a new video packaging format to allow exchange of data
        between DVRs
      notes:
        The ETC was effectively a DVR on steroids. We needed a way to
        store up a dozen or more video streams along with other event data and
        other metadata. This would then allow easy backups and manually
        transferring of recording sessions between DVRs. This would become
        the format that the archiver product would use.

experience:
  title: "Work History"
  entries:
    - name: Opus One Interactive
      title: Senior Software Engineer
      duration:
        start: "2016"
        end:

    - name: "Intermedix"
      title: "Front End Engineer / Release Engineer"
      duration:
        start: "2014"
        end: "2016"

    - name: "PiCon Web Design & Marketing"
      title: "Subcontractor"
      duration:
        start: "2007"
        end: "2015"

    - name: "Walking Thumbs"
      title: "Full Stack Developer"
      duration:
        start: "2013"
        end: "2014"

    - name: "Kb Port"
      title: "Server & Web Developer"
      duration:
        start: "2008"
        end: "2013"
